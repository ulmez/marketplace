package se.gozacke.product;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.Set;

import se.gozacke.data.StorageException;
import se.gozacke.database.Database;

public class MySQLProductRepository implements ProductRepository {
	private List<Product> products;
	private List<Film> films;
	private List<Book> books;
	
	public MySQLProductRepository() {
		products = new ArrayList<>();
		films = new ArrayList<>();
		books = new ArrayList<>();
	}
	
	@Override
	public List<Product> getAllProducts() throws StorageException {
		ResultSet rs = null;
	    Connection conn = null;
	    PreparedStatement pstmt = null;
	    products.clear();
	    
	    try {
			conn = Database.getConnection();
			
			String query = "SELECT * FROM products;";
		
			pstmt = conn.prepareStatement(query);
			
			rs = pstmt.executeQuery();
			
			// Display all the data in the table.
			while (rs.next()) {
				Product tempProduct = new Product(rs.getInt("id"));
				tempProduct.setProductName(rs.getString("product_name"));
				tempProduct.setDescription(rs.getString("description"));
				tempProduct.setCost(rs.getDouble("cost"));
				tempProduct.setRrp(rs.getDouble("rrp"));
				
				products.add(tempProduct);
	        }
		} catch (ClassNotFoundException e) {
			e.printStackTrace();
			throw new StorageException(e.getMessage());
		} catch (SQLException e) {
			e.printStackTrace();
			throw new StorageException(e.getMessage());
		} finally {
			try {
				if(rs != null) {
					rs.close();
				}
				if(pstmt != null) {
					pstmt.close();
				}
				if(conn != null) {
					conn.close();
				}
			} catch (SQLException e) {
				e.printStackTrace();
				throw new StorageException(e.getMessage());
			}
		}
	    
	    return products;
	}
	
	@Override
	public void insertProduct(Product product, Set<Integer> listOfCategories) throws StorageException {
		ResultSet rs = null;
	    Connection conn = null;
	    PreparedStatement pstmt = null;
	    
	    try {
			conn = Database.getConnection();
			
			conn.setAutoCommit(false);
			
			String query = "INSERT INTO products VALUES (null, ?, ?, ?, ?);";
			
			pstmt = conn.prepareStatement(query, PreparedStatement.RETURN_GENERATED_KEYS);
			
			pstmt.setString(1, product.getProductName());
			pstmt.setString(2, product.getDescription());
			pstmt.setDouble(3, product.getCost());
			pstmt.setDouble(4, product.getRrp());
			
			pstmt.executeUpdate();
			
			rs = pstmt.getGeneratedKeys();
			
			rs.next();
			
			int autoGeneratedProductId = rs.getInt(1);
			
			pstmt.close();
			
			query = "INSERT INTO products_categories VALUES (null, ?, ?);";
			
			pstmt = conn.prepareStatement(query, PreparedStatement.RETURN_GENERATED_KEYS);
			
			for(int i : listOfCategories) {
				pstmt.setInt(1, autoGeneratedProductId);
				pstmt.setInt(2, i);
				
				pstmt.executeUpdate();
			}
			
			conn.commit();
		} catch (ClassNotFoundException e) {
			e.printStackTrace();
			throw new StorageException(e.getMessage());
		} catch (SQLException e) {
			try {
				conn.rollback();
			} catch (SQLException e1) {
				e1.printStackTrace();
				throw new StorageException(e1.getMessage());
			}
			e.printStackTrace();
			throw new StorageException(e.getMessage());
		} finally {
			try {
				if(rs != null) {
					rs.close();
				}
				if(pstmt != null) {
					pstmt.close();
				}
				if(conn != null) {
					conn.close();
				}
			} catch (SQLException e) {
				e.printStackTrace();
				throw new StorageException(e.getMessage());
			}
		}
	}
	
	@Override
	public void updateProduct(Product product, Set<Integer> listOfCategories) throws StorageException {
		ResultSet rs = null;
	    Connection conn = null;
	    PreparedStatement pstmt = null;
	    
	    try {
			conn = Database.getConnection();
			
			conn.setAutoCommit(false);
			
			String query = "UPDATE products "
						 + "SET product_name = ?, "
						 + "description = ?, "
						 + "cost = ?, "
						 + "rrp = ? "
						 + "WHERE id = ?;";
			
			pstmt = conn.prepareStatement(query);
			
			pstmt.setString(1, product.getProductName());
			pstmt.setString(2, product.getDescription());
			pstmt.setDouble(3, product.getCost());
			pstmt.setDouble(4, product.getRrp());
			pstmt.setInt(5, product.getProductId());
			
			pstmt.executeUpdate();
			
			if(listOfCategories.size() > 0) {
				query = "DELETE FROM products_categories WHERE products_id = ?;";
				
				pstmt.close();
				
				pstmt = conn.prepareStatement(query);
				
				pstmt.setInt(1, product.getProductId());
				
				pstmt.executeUpdate();
			}
			
			query = "INSERT INTO products_categories VALUES (null, ?, ?);";
			
			pstmt.close();
			
			pstmt = conn.prepareStatement(query);
			
			if(listOfCategories.size() > 0) {
				for(int i : listOfCategories) {
					pstmt.setInt(1, product.getProductId());
					pstmt.setInt(2, i);
					
					pstmt.executeUpdate();
				}
			}
			
			conn.commit();
		} catch (ClassNotFoundException e) {
			e.printStackTrace();
			throw new StorageException(e.getMessage());
		} catch (SQLException e) {
			try {
				conn.rollback();
			} catch (SQLException e1) {
				e1.printStackTrace();
				throw new StorageException(e1.getMessage());
			}
			e.printStackTrace();
			throw new StorageException(e.getMessage());
		} finally {
			try {
				if(rs != null) {
					rs.close();
				}
				if(pstmt != null) {
					pstmt.close();
				}
				if(conn != null) {
					conn.close();
				}
			} catch (SQLException e) {
				e.printStackTrace();
				throw new StorageException(e.getMessage());
			}
		}
	}

	@Override
	public void deleteProduct(Product product) throws StorageException {
		ResultSet rs = null;
	    Connection conn = null;
	    PreparedStatement pstmt = null;
	    
	    try {
			conn = Database.getConnection();
			conn.setAutoCommit(false);
			
			String query = "DELETE FROM shoppingbasket WHERE products_id = ?";
			pstmt = conn.prepareStatement(query);
			pstmt.setInt(1, product.getProductId());
			pstmt.executeUpdate();
			
			query = "DELETE FROM products_categories WHERE products_id = ?";
			pstmt.close();
			pstmt = conn.prepareStatement(query);
			pstmt.setInt(1, product.getProductId());
			pstmt.executeUpdate();
			
			query = "DELETE FROM products WHERE id = ?;";
			pstmt.close();
			pstmt = conn.prepareStatement(query);
			pstmt.setInt(1, product.getProductId());
			pstmt.executeUpdate();
			
			conn.commit();
		} catch (ClassNotFoundException e) {
			e.printStackTrace();
			throw new StorageException(e.getMessage());
		} catch (SQLException e) {
			try {
				conn.rollback();
			} catch (SQLException e1) {
				e1.printStackTrace();
				throw new StorageException(e1.getMessage());
			}
			e.printStackTrace();
			throw new StorageException(e.getMessage());
		} finally {
			try {
				if(rs != null) {
					rs.close();
				}
				if(pstmt != null) {
					pstmt.close();
				}
				if(conn != null) {
					conn.close();
				}
			} catch (SQLException e) {
				e.printStackTrace();
				throw new StorageException(e.getMessage());
			}
		}
	}
	
	@Override
	public List<Product> getProductsFromCategoryName(String categoryName) throws StorageException {
		ResultSet rs = null;
	    Connection conn = null;
	    PreparedStatement pstmt = null;
	    products.clear();
	    
	    try {
			conn = Database.getConnection();
			
			String query = "SELECT products.id, products.product_name, "
								+ "products.description, products.cost, "
								+ "products.rrp "
						 + "FROM products, categories, products_categories "
						 + "WHERE products.id = products_categories.products_id "
						 + "AND categories.id = products_categories.categories_id "
						 + "AND categories.category_name = ?;";
		
			pstmt = conn.prepareStatement(query);
			
			pstmt.setString(1, categoryName);
			
			rs = pstmt.executeQuery();
			
			// Display all the data in the table.
			while (rs.next()) {
				Product tempProduct = new Product(rs.getInt("id"));
				tempProduct.setProductName(rs.getString("product_name"));
				tempProduct.setDescription(rs.getString("description"));
				tempProduct.setCost(rs.getDouble("cost"));
				tempProduct.setRrp(rs.getDouble("rrp"));
				
				products.add(tempProduct);
	        }
		} catch (ClassNotFoundException e) {
			e.printStackTrace();
			throw new StorageException(e.getMessage());
		} catch (SQLException e) {
			e.printStackTrace();
			throw new StorageException(e.getMessage());
		} finally {
			try {
				if(rs != null) {
					rs.close();
				}
				if(pstmt != null) {
					pstmt.close();
				}
				if(conn != null) {
					conn.close();
				}
			} catch (SQLException e) {
				e.printStackTrace();
				throw new StorageException(e.getMessage());
			}
		}
	    
	    return products;
	}
	
	@Override
	public List<Product> getProductFromProductName(String productName) throws StorageException {
		ResultSet rs = null;
	    Connection conn = null;
	    PreparedStatement pstmt = null;
	    products.clear();
	    
	    try {
			conn = Database.getConnection();
			
			String query = "SELECT * FROM products WHERE product_name = ?;";
		
			pstmt = conn.prepareStatement(query);
			
			pstmt.setString(1, productName);
			
			rs = pstmt.executeQuery();
			
			// Display all the data in the table.
			while (rs.next()) {
				Product tempProduct = new Product(rs.getInt("id"));
				tempProduct.setProductName(rs.getString("product_name"));
				tempProduct.setDescription(rs.getString("description"));
				tempProduct.setCost(rs.getDouble("cost"));
				tempProduct.setRrp(rs.getDouble("rrp"));
				
				products.add(tempProduct);
	        }
		} catch (ClassNotFoundException e) {
			e.printStackTrace();
			throw new StorageException(e.getMessage());
		} catch (SQLException e) {
			e.printStackTrace();
			throw new StorageException(e.getMessage());
		} finally {
			try {
				if(rs != null) {
					rs.close();
				}
				if(pstmt != null) {
					pstmt.close();
				}
				if(conn != null) {
					conn.close();
				}
			} catch (SQLException e) {
				e.printStackTrace();
				throw new StorageException(e.getMessage());
			}
		}
	    
	    return products;
	}

	@Override
	public List<Film> getAllFilms() throws StorageException {
		ResultSet rs = null;
	    Connection conn = null;
	    PreparedStatement pstmt = null;
	    films.clear();
	    
	    try {
			conn = Database.getConnection();
			
			String query = "SELECT films.id as film_id, products.id as product_id, "
								+ "products.product_name, products.description, "
								+ "products.cost, products.rrp, films.agelimit, "
								+ "films.release, films.rating "
						 + "FROM products, films "
						 + "WHERE products.id = films.products_id;";
		
			pstmt = conn.prepareStatement(query);
			
			rs = pstmt.executeQuery();
			
			// Display all the data in the table.
			while (rs.next()) {
				Film tempFilm = new Film(rs.getInt("film_id"), rs.getInt("product_id"));
				tempFilm.setProductName(rs.getString("product_name"));
				tempFilm.setDescription(rs.getString("description"));
				tempFilm.setCost(rs.getDouble("cost"));
				tempFilm.setRrp(rs.getDouble("rrp"));
				tempFilm.setRating(rs.getInt("rating"));
				tempFilm.setAgelimit(rs.getInt("agelimit"));
				tempFilm.setReleaseYear(rs.getString("release"));
				
				films.add(tempFilm);
	        }
		} catch (ClassNotFoundException e) {
			e.printStackTrace();
			throw new StorageException(e.getMessage());
		} catch (SQLException e) {
			e.printStackTrace();
			throw new StorageException(e.getMessage());
		} finally {
			try {
				if(rs != null) {
					rs.close();
				}
				if(pstmt != null) {
					pstmt.close();
				}
				if(conn != null) {
					conn.close();
				}
			} catch (SQLException e) {
				e.printStackTrace();
				throw new StorageException(e.getMessage());
			}
		}
	    
	    return films;
	}

	@Override
	public List<Film> getFilmsOnActorId(int actorId) throws StorageException {
		ResultSet rs = null;
	    Connection conn = null;
	    PreparedStatement pstmt = null;
	    films.clear();
	    
	    try {
			conn = Database.getConnection();
			
			String query = "SELECT films.id as film_id, products.id as product_id, "
								+ "products.product_name, products.description, "
								+ "products.cost, products.rrp, films.agelimit, "
								+ "films.release, films.rating "
						 + "FROM products, films, actors, films_actors "
						 + "WHERE films.id = films_actors.films_id "
						 + "AND actors.id = films_actors.actors_id "
						 + "AND products.id = films.products_id "
						 + "AND actors.id = ?;";
		
			pstmt = conn.prepareStatement(query);
			
			pstmt.setInt(1, actorId);
			
			rs = pstmt.executeQuery();
			
			// Display all the data in the table.
			while (rs.next()) {
				Film tempFilm = new Film(rs.getInt("film_id"), rs.getInt("product_id"));
				tempFilm.setProductName(rs.getString("product_name"));
				tempFilm.setDescription(rs.getString("description"));
				tempFilm.setCost(rs.getDouble("cost"));
				tempFilm.setRrp(rs.getDouble("rrp"));
				tempFilm.setRating(rs.getInt("rating"));
				tempFilm.setAgelimit(rs.getInt("agelimit"));
				tempFilm.setReleaseYear(rs.getString("release"));
				
				films.add(tempFilm);
	        }
		} catch (ClassNotFoundException e) {
			e.printStackTrace();
			throw new StorageException(e.getMessage());
		} catch (SQLException e) {
			e.printStackTrace();
			throw new StorageException(e.getMessage());
		} finally {
			try {
				if(rs != null) {
					rs.close();
				}
				if(pstmt != null) {
					pstmt.close();
				}
				if(conn != null) {
					conn.close();
				}
			} catch (SQLException e) {
				e.printStackTrace();
				throw new StorageException(e.getMessage());
			}
		}
	    
	    return films;
	}

	@Override
	public List<Film> getFilmsOnActorFirstNameAndSurName(String firstName, String surName) throws StorageException {
		ResultSet rs = null;
	    Connection conn = null;
	    PreparedStatement pstmt = null;
	    films.clear();
	    
	    try {
			conn = Database.getConnection();
			
			String query = "SELECT films.id as film_id, products.id as product_id, "
								+ "products.product_name, products.description, "
								+ "products.cost, products.rrp, films.agelimit, "
								+ "films.release, films.rating "
						 + "FROM products, films, actors, films_actors "
						 + "WHERE films.id = films_actors.films_id "
						 + "AND actors.id = films_actors.actors_id "
						 + "AND products.id = films.products_id "
						 + "AND actors.firstname = ? "
						 + "AND actors.surname = ?;";
		
			pstmt = conn.prepareStatement(query);
			
			pstmt.setString(1, firstName);
			pstmt.setString(2, surName);
			
			rs = pstmt.executeQuery();
			
			// Display all the data in the table.
			while (rs.next()) {
				Film tempFilm = new Film(rs.getInt("film_id"), rs.getInt("product_id"));
				tempFilm.setProductName(rs.getString("product_name"));
				tempFilm.setDescription(rs.getString("description"));
				tempFilm.setCost(rs.getDouble("cost"));
				tempFilm.setRrp(rs.getDouble("rrp"));
				tempFilm.setRating(rs.getInt("rating"));
				tempFilm.setAgelimit(rs.getInt("agelimit"));
				tempFilm.setReleaseYear(rs.getString("release"));
				
				films.add(tempFilm);
	        }
		} catch (ClassNotFoundException e) {
			e.printStackTrace();
			throw new StorageException(e.getMessage());
		} catch (SQLException e) {
			e.printStackTrace();
			throw new StorageException(e.getMessage());
		} finally {
			try {
				if(rs != null) {
					rs.close();
				}
				if(pstmt != null) {
					pstmt.close();
				}
				if(conn != null) {
					conn.close();
				}
			} catch (SQLException e) {
				e.printStackTrace();
				throw new StorageException(e.getMessage());
			}
		}
	    
	    return films;
	}

	@Override
	public List<Book> getAllBooks() throws StorageException {
		ResultSet rs = null;
	    Connection conn = null;
	    PreparedStatement pstmt = null;
	    books.clear();
	    
	    try {
			conn = Database.getConnection();
			
			String query = "SELECT books.id as book_id, products.id as product_id, "
								+ "products.product_name, products.description, "
								+ "products.cost, products.rrp, books.isbn, books.published "
						 + "FROM products, books "
						 + "WHERE products.id = books.products_id;";
		
			pstmt = conn.prepareStatement(query);
			
			rs = pstmt.executeQuery();
			
			// Display all the data in the table.
			while (rs.next()) {
				Book tempBook = new Book(rs.getInt("book_id"), rs.getInt("product_id"));
				tempBook.setProductName(rs.getString("product_name"));
				tempBook.setDescription(rs.getString("description"));
				tempBook.setCost(rs.getDouble("cost"));
				tempBook.setRrp(rs.getDouble("rrp"));
				tempBook.setIsbn(rs.getString("isbn"));
				tempBook.setPublished(rs.getString("published"));
				
				books.add(tempBook);
	        }
		} catch (ClassNotFoundException e) {
			e.printStackTrace();
			throw new StorageException(e.getMessage());
		} catch (SQLException e) {
			e.printStackTrace();
			throw new StorageException(e.getMessage());
		} finally {
			try {
				if(rs != null) {
					rs.close();
				}
				if(pstmt != null) {
					pstmt.close();
				}
				if(conn != null) {
					conn.close();
				}
			} catch (SQLException e) {
				e.printStackTrace();
				throw new StorageException(e.getMessage());
			}
		}
	    
	    return books;
	}

	@Override
	public List<Book> getBooksOnAuthorId(int authorId) throws StorageException {
		ResultSet rs = null;
	    Connection conn = null;
	    PreparedStatement pstmt = null;
	    books.clear();
	    
	    try {
			conn = Database.getConnection();
			
			String query = "SELECT books.id as book_id, products.id as product_id, "
								+ "products.product_name, products.description, "
								+ "products.cost, products.rrp, books.isbn, books.published "
						 + "FROM products, books, authors, books_authors "
						 + "WHERE books.id = books_authors.books_id "
						 + "AND authors.id = books_authors.authors_id "
						 + "AND products.id = books.products_id "
						 + "AND authors.id = ?;";
		
			pstmt = conn.prepareStatement(query);
			
			pstmt.setInt(1, authorId);
			
			rs = pstmt.executeQuery();
			
			// Display all the data in the table.
			while (rs.next()) {
				Book tempBook = new Book(rs.getInt("book_id"), rs.getInt("product_id"));
				tempBook.setProductName(rs.getString("product_name"));
				tempBook.setDescription(rs.getString("description"));
				tempBook.setCost(rs.getDouble("cost"));
				tempBook.setRrp(rs.getDouble("rrp"));
				tempBook.setIsbn(rs.getString("isbn"));
				tempBook.setPublished(rs.getString("published"));
				
				books.add(tempBook);
	        }
		} catch (ClassNotFoundException e) {
			e.printStackTrace();
			throw new StorageException(e.getMessage());
		} catch (SQLException e) {
			e.printStackTrace();
			throw new StorageException(e.getMessage());
		} finally {
			try {
				if(rs != null) {
					rs.close();
				}
				if(pstmt != null) {
					pstmt.close();
				}
				if(conn != null) {
					conn.close();
				}
			} catch (SQLException e) {
				e.printStackTrace();
				throw new StorageException(e.getMessage());
			}
		}
	    
	    return books;
	}

	@Override
	public List<Book> getBooksOnAuthorFirstNameAndSurName(String firstName, String surName) throws StorageException {
		ResultSet rs = null;
	    Connection conn = null;
	    PreparedStatement pstmt = null;
	    books.clear();
	    
	    try {
			conn = Database.getConnection();
			
			String query = "SELECT books.id as book_id, products.id as product_id, "
								+ "products.product_name, products.description, "
								+ "products.cost, products.rrp, books.isbn, books.published "
						 + "FROM products, books, authors, books_authors "
						 + "WHERE books.id = books_authors.books_id "
						 + "AND authors.id = books_authors.authors_id "
						 + "AND products.id = books.products_id "
						 + "AND authors.firstname = ? "
						 + "AND authors.surname = ?;";
		
			pstmt = conn.prepareStatement(query);
			
			pstmt.setString(1, firstName);
			pstmt.setString(2, surName);
			
			rs = pstmt.executeQuery();
			
			// Display all the data in the table.
			while (rs.next()) {
				Book tempBook = new Book(rs.getInt("book_id"), rs.getInt("product_id"));
				tempBook.setProductName(rs.getString("product_name"));
				tempBook.setDescription(rs.getString("description"));
				tempBook.setCost(rs.getDouble("cost"));
				tempBook.setRrp(rs.getDouble("rrp"));
				tempBook.setIsbn(rs.getString("isbn"));
				tempBook.setPublished(rs.getString("published"));
				
				books.add(tempBook);
	        }
		} catch (ClassNotFoundException e) {
			e.printStackTrace();
			throw new StorageException(e.getMessage());
		} catch (SQLException e) {
			e.printStackTrace();
			throw new StorageException(e.getMessage());
		} finally {
			try {
				if(rs != null) {
					rs.close();
				}
				if(pstmt != null) {
					pstmt.close();
				}
				if(conn != null) {
					conn.close();
				}
			} catch (SQLException e) {
				e.printStackTrace();
				throw new StorageException(e.getMessage());
			}
		}
	    
	    return books;
	}

	@Override
	public void insertFilm(Film film, Set<Integer> listOfCategories, Set<Integer> listOfActors) throws StorageException {
		ResultSet rs = null;
	    Connection conn = null;
	    PreparedStatement pstmt = null;
	    
	    try {
			conn = Database.getConnection();
			
			conn.setAutoCommit(false);
			
			String query = "INSERT INTO products VALUES (null, ?, ?, ?, ?);";
			
			pstmt = conn.prepareStatement(query, PreparedStatement.RETURN_GENERATED_KEYS);
			
			pstmt.setString(1, film.getProductName());
			pstmt.setString(2, film.getDescription());
			pstmt.setDouble(3, film.getCost());
			pstmt.setDouble(4, film.getRrp());
			
			pstmt.executeUpdate();
			
			rs = pstmt.getGeneratedKeys();
			
			rs.next();
			
			int autoGeneratedProductId = rs.getInt(1);
			
			pstmt.close();
			
			query = "INSERT INTO films VALUES (null, ?, ?, ?, ?);";
			
			pstmt = conn.prepareStatement(query, PreparedStatement.RETURN_GENERATED_KEYS);
			
			pstmt.setInt(1, film.getRating());
			pstmt.setInt(2, film.getAgelimit());
			pstmt.setString(3, film.getReleaseYear());
			pstmt.setInt(4, autoGeneratedProductId);
			
			pstmt.executeUpdate();
			
			rs.close();
			
			rs = pstmt.getGeneratedKeys();
			
			rs.next();
			
			int autoGeneratedFilmId = rs.getInt(1);
			
			query = "INSERT INTO products_categories VALUES (null, ?, ?);";
			
			pstmt = conn.prepareStatement(query, PreparedStatement.RETURN_GENERATED_KEYS);
			
			for(int i : listOfCategories) {
				pstmt.setInt(1, autoGeneratedProductId);
				pstmt.setInt(2, i);
				
				pstmt.executeUpdate();
			}
			
			query = "INSERT INTO films_actors VALUES (null, ?, ?);";
			
			pstmt = conn.prepareStatement(query, PreparedStatement.RETURN_GENERATED_KEYS);
			
			for(int i : listOfActors) {
				pstmt.setInt(1, i);
				pstmt.setInt(2, autoGeneratedFilmId);
				
				pstmt.executeUpdate();
			}
			
			conn.commit();
		} catch (ClassNotFoundException e) {
			e.printStackTrace();
			throw new StorageException(e.getMessage());
		} catch (SQLException e) {
			try {
				conn.rollback();
			} catch (SQLException e1) {
				e1.printStackTrace();
				throw new StorageException(e1.getMessage());
			}
			e.printStackTrace();
			throw new StorageException(e.getMessage());
		} finally {
			try {
				if(rs != null) {
					rs.close();
				}
				if(pstmt != null) {
					pstmt.close();
				}
				if(conn != null) {
					conn.close();
				}
			} catch (SQLException e) {
				e.printStackTrace();
				throw new StorageException(e.getMessage());
			}
		}
	}

	@Override
	public void updateFilm(Film film, Set<Integer> listOfCategories, Set<Integer> listOfActors) throws StorageException {
		ResultSet rs = null;
	    Connection conn = null;
	    PreparedStatement pstmt = null;
	    
	    try {
			conn = Database.getConnection();
			
			conn.setAutoCommit(false);
			
			String query = "UPDATE products "
						 + "SET product_name = ?, "
						 + "description = ?, "
						 + "cost = ?, "
						 + "rrp = ? "
						 + "WHERE id = ?;";
			
			pstmt = conn.prepareStatement(query);
			
			pstmt.setString(1, film.getProductName());
			pstmt.setString(2, film.getDescription());
			pstmt.setDouble(3, film.getCost());
			pstmt.setDouble(4, film.getRrp());
			pstmt.setInt(5, film.getProductId());
			
			pstmt.executeUpdate();
			
			query = "UPDATE films "
				  + "SET films.rating = ?, "
				  + "films.agelimit = ?, "
				  + "films.release = ? "
				  + "WHERE films.id = ?;";
			
			pstmt.close();
			
			pstmt = conn.prepareStatement(query);
			
			pstmt.setInt(1, film.getRating());
			pstmt.setInt(2, film.getAgelimit());
			pstmt.setString(3, film.getReleaseYear());
			pstmt.setInt(4, film.getFilmId());
			
			pstmt.executeUpdate();
			
			if(listOfCategories.size() > 0) {
				query = "DELETE FROM products_categories WHERE products_id = ?;";
				
				pstmt.close();
				
				pstmt = conn.prepareStatement(query);
				
				pstmt.setInt(1, film.getProductId());
				
				pstmt.executeUpdate();
			}
			
			query = "INSERT INTO products_categories VALUES (null, ?, ?);";
			
			pstmt.close();
			
			pstmt = conn.prepareStatement(query);
			
			if(listOfCategories.size() > 0) {
				for(int i : listOfCategories) {
					pstmt.setInt(1, film.getProductId());
					pstmt.setInt(2, i);
					
					pstmt.executeUpdate();
				}
			}
			
			if(listOfActors.size() > 0) {
				query = "DELETE FROM films_actors WHERE films_id = ?;";
				
				pstmt.close();
				
				pstmt = conn.prepareStatement(query);
				
				pstmt.setInt(1, film.getFilmId());
				
				pstmt.executeUpdate();
			}
			
			query = "INSERT INTO films_actors VALUES (null, ?, ?);";
			
			pstmt.close();
			
			pstmt = conn.prepareStatement(query);
			
			if(listOfActors.size() > 0) {
				for(int i : listOfActors) {
					pstmt.setInt(1, i);
					pstmt.setInt(2, film.getFilmId());
					
					pstmt.executeUpdate();
				}
			}
			
			conn.commit();
		} catch (ClassNotFoundException e) {
			e.printStackTrace();
			throw new StorageException(e.getMessage());
		} catch (SQLException e) {
			try {
				conn.rollback();
			} catch (SQLException e1) {
				e1.printStackTrace();
				throw new StorageException(e1.getMessage());
			}
			e.printStackTrace();
			throw new StorageException(e.getMessage());
		} finally {
			try {
				if(rs != null) {
					rs.close();
				}
				if(pstmt != null) {
					pstmt.close();
				}
				if(conn != null) {
					conn.close();
				}
			} catch (SQLException e) {
				e.printStackTrace();
				throw new StorageException(e.getMessage());
			}
		}
	}

	@Override
	public void deleteFilm(Film film) throws StorageException {
		ResultSet rs = null;
	    Connection conn = null;
	    PreparedStatement pstmt = null;
	    
	    try {
			conn = Database.getConnection();
			conn.setAutoCommit(false);
			
			String query = "DELETE FROM products_categories WHERE products_categories.products_id = ?;";
			pstmt = conn.prepareStatement(query);
			pstmt.setInt(1, film.getProductId());
			pstmt.executeUpdate();
			
			query = "DELETE FROM films_actors WHERE films_id = ?";
			pstmt.close();
			pstmt = conn.prepareStatement(query);
			pstmt.setInt(1, film.getFilmId());
			pstmt.executeUpdate();
			
			query = "DELETE FROM shoppingbasket WHERE shoppingbasket.products_id = ?";
			pstmt.close();
			pstmt = conn.prepareStatement(query);
			pstmt.setInt(1, film.getProductId());
			pstmt.executeUpdate();
			
			query = "DELETE FROM films WHERE films.id = ?";
			pstmt.close();
			pstmt = conn.prepareStatement(query);
			pstmt.setInt(1, film.getFilmId());
			pstmt.executeUpdate();
			
			query = "DELETE FROM products WHERE products.id = ?;";
			pstmt.close();
			pstmt = conn.prepareStatement(query);
			pstmt.setInt(1, film.getProductId());
			pstmt.executeUpdate();
			
			conn.commit();
		} catch (ClassNotFoundException e) {
			e.printStackTrace();
			throw new StorageException(e.getMessage());
		} catch (SQLException e) {
			try {
				conn.rollback();
			} catch (SQLException e1) {
				e1.printStackTrace();
				throw new StorageException(e1.getMessage());
			}
			e.printStackTrace();
			throw new StorageException(e.getMessage());
		} finally {
			try {
				if(rs != null) {
					rs.close();
				}
				if(pstmt != null) {
					pstmt.close();
				}
				if(conn != null) {
					conn.close();
				}
			} catch (SQLException e) {
				e.printStackTrace();
				throw new StorageException(e.getMessage());
			}
		}
	}

	@Override
	public void insertBook(Book book, Set<Integer> listOfCategories, Set<Integer> listOfAuthors) throws StorageException {
		ResultSet rs = null;
	    Connection conn = null;
	    PreparedStatement pstmt = null;
	    
	    try {
			conn = Database.getConnection();
			
			conn.setAutoCommit(false);
			
			String query = "INSERT INTO products VALUES (null, ?, ?, ?, ?);";
			
			pstmt = conn.prepareStatement(query, PreparedStatement.RETURN_GENERATED_KEYS);
			
			pstmt.setString(1, book.getProductName());
			pstmt.setString(2, book.getDescription());
			pstmt.setDouble(3, book.getCost());
			pstmt.setDouble(4, book.getRrp());
			
			pstmt.executeUpdate();
			
			rs = pstmt.getGeneratedKeys();
			
			rs.next();
			
			int autoGeneratedProductId = rs.getInt(1);
			
			pstmt.close();
			
			query = "INSERT INTO books VALUES (null, ?, ?, ?);";
			
			pstmt = conn.prepareStatement(query, PreparedStatement.RETURN_GENERATED_KEYS);
			
			pstmt.setString(1, book.getIsbn());
			pstmt.setString(2, book.getPublished());
			pstmt.setInt(3, autoGeneratedProductId);
			
			pstmt.executeUpdate();
			
			rs.close();
			
			rs = pstmt.getGeneratedKeys();
			
			rs.next();
			
			int autoGeneratedBookId = rs.getInt(1);
			
			query = "INSERT INTO products_categories VALUES (null, ?, ?);";
			
			pstmt = conn.prepareStatement(query, PreparedStatement.RETURN_GENERATED_KEYS);
			
			for(int i : listOfCategories) {
				pstmt.setInt(1, autoGeneratedProductId);
				pstmt.setInt(2, i);
				
				pstmt.executeUpdate();
			}
			
			query = "INSERT INTO books_authors VALUES (null, ?, ?);";
			
			pstmt = conn.prepareStatement(query, PreparedStatement.RETURN_GENERATED_KEYS);
			
			for(int i : listOfAuthors) {
				pstmt.setInt(1, autoGeneratedBookId);
				pstmt.setInt(2, i);
				
				pstmt.executeUpdate();
			}
			
			conn.commit();
		} catch (ClassNotFoundException e) {
			e.printStackTrace();
			throw new StorageException(e.getMessage());
		} catch (SQLException e) {
			try {
				conn.rollback();
			} catch (SQLException e1) {
				e1.printStackTrace();
				throw new StorageException(e1.getMessage());
			}
			e.printStackTrace();
			throw new StorageException(e.getMessage());
		} finally {
			try {
				if(rs != null) {
					rs.close();
				}
				if(pstmt != null) {
					pstmt.close();
				}
				if(conn != null) {
					conn.close();
				}
			} catch (SQLException e) {
				e.printStackTrace();
				throw new StorageException(e.getMessage());
			}
		}
	}

	@Override
	public List<Film> getFilmOnProductId(int productId) throws StorageException {
		ResultSet rs = null;
	    Connection conn = null;
	    PreparedStatement pstmt = null;
	    films.clear();
	    
	    try {
			conn = Database.getConnection();
			
			String query = "SELECT films.id as film_id, products.id as product_id, "
								+ "products.product_name, products.description, "
								+ "products.cost, products.rrp, films.agelimit, "
								+ "films.release, films.rating "
						 + "FROM products, films "
						 + "WHERE products.id = films.products_id "
						 + "AND products.id = ?;";
		
			pstmt = conn.prepareStatement(query);
			
			pstmt.setInt(1, productId);
			
			rs = pstmt.executeQuery();
			
			// Display all the data in the table.
			while (rs.next()) {
				Film tempFilm = new Film(rs.getInt("film_id"), rs.getInt("product_id"));
				tempFilm.setProductName(rs.getString("product_name"));
				tempFilm.setDescription(rs.getString("description"));
				tempFilm.setCost(rs.getDouble("cost"));
				tempFilm.setRrp(rs.getDouble("rrp"));
				tempFilm.setRating(rs.getInt("rating"));
				tempFilm.setAgelimit(rs.getInt("agelimit"));
				tempFilm.setReleaseYear(rs.getString("release"));
				
				films.add(tempFilm);
	        }
		} catch (ClassNotFoundException e) {
			e.printStackTrace();
			throw new StorageException(e.getMessage());
		} catch (SQLException e) {
			e.printStackTrace();
			throw new StorageException(e.getMessage());
		} finally {
			try {
				if(rs != null) {
					rs.close();
				}
				if(pstmt != null) {
					pstmt.close();
				}
				if(conn != null) {
					conn.close();
				}
			} catch (SQLException e) {
				e.printStackTrace();
				throw new StorageException(e.getMessage());
			}
		}
	    
	    return films;
	}

	@Override
	public List<Film> getFilmOnProductName(String productName) throws StorageException {
		ResultSet rs = null;
	    Connection conn = null;
	    PreparedStatement pstmt = null;
	    films.clear();
	    
	    try {
			conn = Database.getConnection();
			
			String query = "SELECT films.id as film_id, products.id as product_id, "
								+ "products.product_name, products.description, "
								+ "products.cost, products.rrp, films.agelimit, "
								+ "films.release, films.rating "
						 + "FROM products, films "
						 + "WHERE products.id = films.products_id "
						 + "AND products.product_name = ?;";
		
			pstmt = conn.prepareStatement(query);
			
			pstmt.setString(1, productName);
			
			rs = pstmt.executeQuery();
			
			// Display all the data in the table.
			while (rs.next()) {
				Film tempFilm = new Film(rs.getInt("film_id"), rs.getInt("product_id"));
				tempFilm.setProductName(rs.getString("product_name"));
				tempFilm.setDescription(rs.getString("description"));
				tempFilm.setCost(rs.getDouble("cost"));
				tempFilm.setRrp(rs.getDouble("rrp"));
				tempFilm.setRating(rs.getInt("rating"));
				tempFilm.setAgelimit(rs.getInt("agelimit"));
				tempFilm.setReleaseYear(rs.getString("release"));
				
				films.add(tempFilm);
	        }
		} catch (ClassNotFoundException e) {
			e.printStackTrace();
			throw new StorageException(e.getMessage());
		} catch (SQLException e) {
			e.printStackTrace();
			throw new StorageException(e.getMessage());
		} finally {
			try {
				if(rs != null) {
					rs.close();
				}
				if(pstmt != null) {
					pstmt.close();
				}
				if(conn != null) {
					conn.close();
				}
			} catch (SQLException e) {
				e.printStackTrace();
				throw new StorageException(e.getMessage());
			}
		}
	    
	    return films;
	}
	
	@Override
	public void updateBook(Book book, Set<Integer> listOfCategories, Set<Integer> listOfAuthors) throws StorageException {
		ResultSet rs = null;
	    Connection conn = null;
	    PreparedStatement pstmt = null;
	    
	    try {
			conn = Database.getConnection();
			
			conn.setAutoCommit(false);
			
			String query = "UPDATE products "
					 + "SET product_name = ?, "
					 + "description = ?, "
					 + "cost = ?, "
					 + "rrp = ? "
					 + "WHERE id = ?;";
			
			pstmt = conn.prepareStatement(query, PreparedStatement.RETURN_GENERATED_KEYS);
			
			pstmt.setString(1, book.getProductName());
			pstmt.setString(2, book.getDescription());
			pstmt.setDouble(3, book.getCost());
			pstmt.setDouble(4, book.getRrp());
			pstmt.setInt(5, book.getProductId());
			
			pstmt.executeUpdate();
			
			query = "UPDATE books "
				  + "SET isbn = ?, "
				  + "published = ? "
				  + "WHERE products_id = ?;";
			
			pstmt.close();
			
			pstmt = conn.prepareStatement(query, PreparedStatement.RETURN_GENERATED_KEYS);
			
			pstmt.setString(1, book.getIsbn());
			pstmt.setString(2, book.getPublished());
			pstmt.setInt(3, book.getProductId());
			
			pstmt.executeUpdate();
			
			if(listOfCategories.size() > 0) {
				query = "DELETE FROM products_categories WHERE products_id = ?;";
				
				pstmt.close();
				
				pstmt = conn.prepareStatement(query);
				
				pstmt.setInt(1, book.getProductId());
				
				pstmt.executeUpdate();
			}
			
			query = "INSERT INTO products_categories VALUES (null, ?, ?);";
			
			pstmt.close();
			
			pstmt = conn.prepareStatement(query);
			
			if(listOfCategories.size() > 0) {
				for(int i : listOfCategories) {
					pstmt.setInt(1, book.getProductId());
					pstmt.setInt(2, i);
					
					pstmt.executeUpdate();
				}
			}
			
			if(listOfAuthors.size() > 0) {
				query = "DELETE FROM books_authors WHERE books_id = ?;";
				
				pstmt.close();
				
				pstmt = conn.prepareStatement(query);
				
				pstmt.setInt(1, book.getBookId());
				
				pstmt.executeUpdate();
			}
			
			query = "INSERT INTO books_authors VALUES (null, ?, ?);";
			
			pstmt.close();
			
			pstmt = conn.prepareStatement(query);
			
			if(listOfAuthors.size() > 0) {
				for(int i : listOfAuthors) {
					pstmt.setInt(1, book.getBookId());
					pstmt.setInt(2, i);
					
					pstmt.executeUpdate();
				}
			}
			
			conn.commit();
		} catch (ClassNotFoundException e) {
			e.printStackTrace();
			throw new StorageException(e.getMessage());
		} catch (SQLException e) {
			try {
				conn.rollback();
			} catch (SQLException e1) {
				e1.printStackTrace();
				throw new StorageException(e1.getMessage());
			}
			e.printStackTrace();
			throw new StorageException(e.getMessage());
		} finally {
			try {
				if(rs != null) {
					rs.close();
				}
				if(pstmt != null) {
					pstmt.close();
				}
				if(conn != null) {
					conn.close();
				}
			} catch (SQLException e) {
				e.printStackTrace();
				throw new StorageException(e.getMessage());
			}
		}
	}

	@Override
	public List<Book> getBookOnProductId(int productId) throws StorageException {
		ResultSet rs = null;
	    Connection conn = null;
	    PreparedStatement pstmt = null;
	    books.clear();
	    
	    try {
			conn = Database.getConnection();
			
			String query = "SELECT books.id as book_id, products.id as product_id, "
								+ "products.product_name, products.description, "
								+ "products.cost, products.rrp, books.isbn, "
								+ "books.published "
						 + "FROM products, books "
						 + "WHERE products.id = books.products_id "
						 + "AND products.id = ?;";
		
			pstmt = conn.prepareStatement(query);
			
			pstmt.setInt(1, productId);
			
			rs = pstmt.executeQuery();
			
			// Display all the data in the table.
			while (rs.next()) {
				Book tempBook = new Book(rs.getInt("book_id"), rs.getInt("product_id"));
				tempBook.setProductName(rs.getString("product_name"));
				tempBook.setDescription(rs.getString("description"));
				tempBook.setCost(rs.getDouble("cost"));
				tempBook.setRrp(rs.getDouble("rrp"));
				tempBook.setIsbn(rs.getString("isbn"));
				tempBook.setPublished(rs.getString("published"));
				
				books.add(tempBook);
	        }
		} catch (ClassNotFoundException e) {
			e.printStackTrace();
			throw new StorageException(e.getMessage());
		} catch (SQLException e) {
			e.printStackTrace();
			throw new StorageException(e.getMessage());
		} finally {
			try {
				if(rs != null) {
					rs.close();
				}
				if(pstmt != null) {
					pstmt.close();
				}
				if(conn != null) {
					conn.close();
				}
			} catch (SQLException e) {
				e.printStackTrace();
				throw new StorageException(e.getMessage());
			}
		}
	    
	    return books;
	}

	@Override
	public List<Book> getBookOnProductName(String productName) throws StorageException {
		ResultSet rs = null;
	    Connection conn = null;
	    PreparedStatement pstmt = null;
	    books.clear();
	    
	    try {
			conn = Database.getConnection();
			
			String query = "SELECT books.id as book_id, products.id as product_id, "
								+ "products.product_name, products.description, products.cost, "
								+ "products.rrp, books.isbn, books.published "
						 + "FROM products, books "
						 + "WHERE products.id = books.products_id "
						 + "AND products.product_name = ?;";
		
			pstmt = conn.prepareStatement(query);
			
			pstmt.setString(1, productName);
			
			rs = pstmt.executeQuery();
			
			// Display all the data in the table.
			while (rs.next()) {
				Book tempBook = new Book(rs.getInt("book_id"), rs.getInt("product_id"));
				tempBook.setProductName(rs.getString("product_name"));
				tempBook.setDescription(rs.getString("description"));
				tempBook.setCost(rs.getDouble("cost"));
				tempBook.setRrp(rs.getDouble("rrp"));
				tempBook.setIsbn(rs.getString("isbn"));
				tempBook.setPublished(rs.getString("published"));
				
				books.add(tempBook);
	        }
		} catch (ClassNotFoundException e) {
			e.printStackTrace();
			throw new StorageException(e.getMessage());
		} catch (SQLException e) {
			e.printStackTrace();
			throw new StorageException(e.getMessage());
		} finally {
			try {
				if(rs != null) {
					rs.close();
				}
				if(pstmt != null) {
					pstmt.close();
				}
				if(conn != null) {
					conn.close();
				}
			} catch (SQLException e) {
				e.printStackTrace();
				throw new StorageException(e.getMessage());
			}
		}
	    
	    return books;
	}

	@Override
	public void deleteBook(Book book) throws StorageException {
		ResultSet rs = null;
	    Connection conn = null;
	    PreparedStatement pstmt = null;
	    
	    try {
			conn = Database.getConnection();
			conn.setAutoCommit(false);
			
			String query = "DELETE FROM products_categories WHERE products_categories.products_id = ?;";
			pstmt = conn.prepareStatement(query);
			pstmt.setInt(1, book.getProductId());
			pstmt.executeUpdate();
			
			query = "DELETE FROM books_authors WHERE books_id = ?";
			pstmt.close();
			pstmt = conn.prepareStatement(query);
			pstmt.setInt(1, book.getBookId());
			pstmt.executeUpdate();
			
			query = "DELETE FROM shoppingbasket WHERE shoppingbasket.products_id = ?";
			pstmt.close();
			pstmt = conn.prepareStatement(query);
			pstmt.setInt(1, book.getProductId());
			pstmt.executeUpdate();
			
			query = "DELETE FROM books WHERE books.id = ?";
			pstmt.close();
			pstmt = conn.prepareStatement(query);
			pstmt.setInt(1, book.getBookId());
			pstmt.executeUpdate();
			
			query = "DELETE FROM products WHERE products.id = ?;";
			pstmt.close();
			pstmt = conn.prepareStatement(query);
			pstmt.setInt(1, book.getProductId());
			pstmt.executeUpdate();
			
			conn.commit();
		} catch (ClassNotFoundException e) {
			e.printStackTrace();
			throw new StorageException(e.getMessage());
		} catch (SQLException e) {
			try {
				conn.rollback();
			} catch (SQLException e1) {
				e1.printStackTrace();
				throw new StorageException(e1.getMessage());
			}
			e.printStackTrace();
			throw new StorageException(e.getMessage());
		} finally {
			try {
				if(rs != null) {
					rs.close();
				}
				if(pstmt != null) {
					pstmt.close();
				}
				if(conn != null) {
					conn.close();
				}
			} catch (SQLException e) {
				e.printStackTrace();
				throw new StorageException(e.getMessage());
			}
		}
	}

	@Override
	public int getProductIdOnFilmId(int filmId) throws StorageException {
		ResultSet rs = null;
	    Connection conn = null;
	    PreparedStatement pstmt = null;
	    int productId = 0;
	    
	    try {
			conn = Database.getConnection();
			
			String query = "SELECT films.products_id FROM films WHERE films.id = ?;";
		
			pstmt = conn.prepareStatement(query);
			
			pstmt.setInt(1, filmId);
			
			rs = pstmt.executeQuery();
			
			// Display all the data in the table.
			while (rs.next()) {
				productId = rs.getInt("products_id");
	        }
		} catch (ClassNotFoundException e) {
			e.printStackTrace();
			throw new StorageException(e.getMessage());
		} catch (SQLException e) {
			e.printStackTrace();
			throw new StorageException(e.getMessage());
		} finally {
			try {
				if(rs != null) {
					rs.close();
				}
				if(pstmt != null) {
					pstmt.close();
				}
				if(conn != null) {
					conn.close();
				}
			} catch (SQLException e) {
				e.printStackTrace();
				throw new StorageException(e.getMessage());
			}
		}
	    
	    return productId;
	}

	@Override
	public int getProductIdOnBookId(int bookId) throws StorageException {
		ResultSet rs = null;
	    Connection conn = null;
	    PreparedStatement pstmt = null;
	    int productId = 0;
	    
	    try {
			conn = Database.getConnection();
			
			String query = "SELECT books.products_id FROM books WHERE books.id = ?;";
		
			pstmt = conn.prepareStatement(query);
			
			pstmt.setInt(1, bookId);
			
			rs = pstmt.executeQuery();
			
			// Display all the data in the table.
			while (rs.next()) {
				productId = rs.getInt("products_id");
	        }
		} catch (ClassNotFoundException e) {
			e.printStackTrace();
			throw new StorageException(e.getMessage());
		} catch (SQLException e) {
			e.printStackTrace();
			throw new StorageException(e.getMessage());
		} finally {
			try {
				if(rs != null) {
					rs.close();
				}
				if(pstmt != null) {
					pstmt.close();
				}
				if(conn != null) {
					conn.close();
				}
			} catch (SQLException e) {
				e.printStackTrace();
				throw new StorageException(e.getMessage());
			}
		}
	    
	    return productId;
	}

	@Override
	public List<Product> getProductFromProductId(int productId) throws StorageException {
		ResultSet rs = null;
	    Connection conn = null;
	    PreparedStatement pstmt = null;
	    products.clear();
	    
	    try {
			conn = Database.getConnection();
			
			String query = "SELECT * FROM products WHERE products.id = ?;";
		
			pstmt = conn.prepareStatement(query);
			
			pstmt.setInt(1, productId);
			
			rs = pstmt.executeQuery();
			
			// Display all the data in the table.
			while (rs.next()) {
				Product tempProduct = new Product(rs.getInt("id"));
				tempProduct.setProductName(rs.getString("product_name"));
				tempProduct.setDescription(rs.getString("description"));
				tempProduct.setCost(rs.getDouble("cost"));
				tempProduct.setRrp(rs.getDouble("rrp"));
				
				products.add(tempProduct);
	        }
		} catch (ClassNotFoundException e) {
			e.printStackTrace();
			throw new StorageException(e.getMessage());
		} catch (SQLException e) {
			e.printStackTrace();
			throw new StorageException(e.getMessage());
		} finally {
			try {
				if(rs != null) {
					rs.close();
				}
				if(pstmt != null) {
					pstmt.close();
				}
				if(conn != null) {
					conn.close();
				}
			} catch (SQLException e) {
				e.printStackTrace();
				throw new StorageException(e.getMessage());
			}
		}
	    
	    return products;
	}

	@Override
	public List<Product> getProductsFromOrderId(int orderId) throws StorageException {
		ResultSet rs = null;
	    Connection conn = null;
	    PreparedStatement pstmt = null;
	    products.clear();
	    
	    try {
			conn = Database.getConnection();
			
			String query = "SELECT products.id, products.product_name, products.description, "
								+ "products.cost, products.rrp "
						 + "FROM products "
						 + "INNER JOIN orderlines "
						 + "ON products.id = orderlines.products_id "
						 + "INNER JOIN orders "
						 + "ON orderlines.orders_id = orders.id "
						 + "WHERE orders.id = ?;";
		
			pstmt = conn.prepareStatement(query);
			
			pstmt.setInt(1, orderId);
			
			rs = pstmt.executeQuery();
			
			// Display all the data in the table.
			while (rs.next()) {
				Product tempProduct = new Product(rs.getInt("id"));
				tempProduct.setProductName(rs.getString("product_name"));
				tempProduct.setDescription(rs.getString("description"));
				tempProduct.setCost(rs.getDouble("cost"));
				tempProduct.setRrp(rs.getDouble("rrp"));
				
				products.add(tempProduct);
	        }
		} catch (ClassNotFoundException e) {
			e.printStackTrace();
			throw new StorageException(e.getMessage());
		} catch (SQLException e) {
			e.printStackTrace();
			throw new StorageException(e.getMessage());
		} finally {
			try {
				if(rs != null) {
					rs.close();
				}
				if(pstmt != null) {
					pstmt.close();
				}
				if(conn != null) {
					conn.close();
				}
			} catch (SQLException e) {
				e.printStackTrace();
				throw new StorageException(e.getMessage());
			}
		}
	    
	    return products;
	}

	@Override
	public List<Product> getProductsLessThenXInStock(int stock) throws StorageException {
		ResultSet rs = null;
	    Connection conn = null;
	    PreparedStatement pstmt = null;
	    products.clear();
	    
	    try {
			conn = Database.getConnection();
			
			String query = "SELECT products.id, products.product_name, products.description, "
								+ "products.cost, products.rrp "
						 + "FROM products "
						 + "INNER JOIN warehouse "
						 + "ON products.id = warehouse.products_id "
						 + "WHERE warehouse.stock < ?;";
		
			pstmt = conn.prepareStatement(query);
			
			pstmt.setInt(1, stock);
			
			rs = pstmt.executeQuery();
			
			// Display all the data in the table.
			while (rs.next()) {
				Product tempProduct = new Product(rs.getInt("id"));
				tempProduct.setProductName(rs.getString("product_name"));
				tempProduct.setDescription(rs.getString("description"));
				tempProduct.setCost(rs.getDouble("cost"));
				tempProduct.setRrp(rs.getDouble("rrp"));
				
				products.add(tempProduct);
	        }
		} catch (ClassNotFoundException e) {
			e.printStackTrace();
			throw new StorageException(e.getMessage());
		} catch (SQLException e) {
			e.printStackTrace();
			throw new StorageException(e.getMessage());
		} finally {
			try {
				if(rs != null) {
					rs.close();
				}
				if(pstmt != null) {
					pstmt.close();
				}
				if(conn != null) {
					conn.close();
				}
			} catch (SQLException e) {
				e.printStackTrace();
				throw new StorageException(e.getMessage());
			}
		}
	    
	    return products;
	}
}