package se.gozacke.order;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import se.gozacke.data.StorageException;
import se.gozacke.database.Database;
import se.gozacke.orderline.OrderLine;
import se.gozacke.shoppingbasket.ShoppingBasket;
import se.gozacke.warehouse.WarehouseRepository;

public class MySQLOrderRepository implements OrderRepository {
	private List<Order> orders;
	
	public MySQLOrderRepository() {
		orders = new ArrayList<>();
	}
	
	@Override
	public List<Order> getAllOrders() throws StorageException {
		ResultSet rs = null;
	    Connection conn = null;
	    PreparedStatement pstmt = null;
	    orders.clear();
	    
	    try {
			conn = Database.getConnection();
			
			String query = "SELECT orders.id, orders.orderdate FROM orders ORDER BY orders.orderdate ASC;";
		
			pstmt = conn.prepareStatement(query);
			
			rs = pstmt.executeQuery();
			
			// Display all the data in the table.
			while (rs.next()) {
				Order tempOrder = new Order(rs.getInt("id"));
				tempOrder.setOrderDate(rs.getString("orderdate"));
				
				orders.add(tempOrder);
	        }
		} catch (ClassNotFoundException e) {
			e.printStackTrace();
			throw new StorageException(e.getMessage());
		} catch (SQLException e) {
			e.printStackTrace();
			throw new StorageException(e.getMessage());
		} finally {
			try {
				if(rs != null) {
					rs.close();
				}
				if(pstmt != null) {
					pstmt.close();
				}
				if(conn != null) {
					conn.close();
				}
			} catch (SQLException e) {
				e.printStackTrace();
				throw new StorageException(e.getMessage());
			}
		}
	    
	    return orders;
	}

	@Override
	public void insertOrderFromShoppingBasket(List<ShoppingBasket> orderLine, WarehouseRepository wr) throws StorageException {
		ResultSet rs = null;
	    Connection conn = null;
	    PreparedStatement pstmt = null;
	    
	    try {
			conn = Database.getConnection();
			conn.setAutoCommit(false);
			
			String query = "INSERT INTO orders VALUES (null, now());";
			pstmt = conn.prepareStatement(query, PreparedStatement.RETURN_GENERATED_KEYS);
			pstmt.executeUpdate();
			
			rs = pstmt.getGeneratedKeys();
			rs.next();
			
			int autoGeneratedOrderId = rs.getInt(1);
			
			pstmt.close();
			
			query = "INSERT INTO orderlines VALUES (null, ?, ?, ?, ?);";
			pstmt = conn.prepareStatement(query, PreparedStatement.RETURN_GENERATED_KEYS);
			
			for(ShoppingBasket sb : orderLine) {
				pstmt.setInt(1, sb.getQuantity());
				pstmt.setInt(2, autoGeneratedOrderId);
				pstmt.setInt(3, sb.getUserId());
				pstmt.setInt(4, sb.getProductId());
				pstmt.executeUpdate();
			}
			
			query = "UPDATE warehouse "
				  + "SET warehouse.stock = ?, "
				  + "warehouse.products_id = ? "
				  + "WHERE warehouse.products_id = ?;";
			
			pstmt = conn.prepareStatement(query);
			
			for(ShoppingBasket sb : orderLine) {
				int updatedStock = wr.getWarehouseOnProductId(sb.getProductId()).get(0).getStock() - sb.getQuantity();
				pstmt.setInt(1, updatedStock);
				pstmt.setInt(2, sb.getProductId());
				pstmt.setInt(3, sb.getProductId());
				pstmt.executeUpdate();
			}
			
			query = "DELETE FROM shoppingbasket WHERE users_id = ?";
			pstmt = conn.prepareStatement(query);
			pstmt.setInt(1, orderLine.get(0).getUserId());
			pstmt.executeUpdate();
			
			conn.commit();
		} catch (ClassNotFoundException e) {
			e.printStackTrace();
			throw new StorageException(e.getMessage());
		} catch (SQLException e) {
			try {
				conn.rollback();
			} catch (SQLException e1) {
				e1.printStackTrace();
				throw new StorageException(e1.getMessage());
			}
			e.printStackTrace();
			throw new StorageException(e.getMessage());
		} finally {
			try {
				if(rs != null) {
					rs.close();
				}
				if(pstmt != null) {
					pstmt.close();
				}
				if(conn != null) {
					conn.close();
				}
			} catch (SQLException e) {
				e.printStackTrace();
				throw new StorageException(e.getMessage());
			}
		}
	}
}